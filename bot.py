import telebot
from telebot.types import ReplyKeyboardRemove
import os
from dotenv import load_dotenv
from db import (
    init_db, add_movie_to_db, get_movie_by_code, update_movie_in_db, delete_movie_from_db,
    add_sponsor_to_db, get_all_sponsors, update_sponsor_in_db, delete_sponsor_from_db
)
from keyboard import main_menu, sponsors_keyboard, movies_admin_menu, sponsors_admin_menu, admin_menu

load_dotenv()

TOKEN = os.getenv("TOKEN")
ADMIN_ID = list(map(int, os.getenv("ADMINS").split(',')))

bot = telebot.TeleBot(TOKEN)
init_db()

def check_subscription(user_id):
    sponsors = get_all_sponsors()
    if not sponsors:
        return True  # –ï—Å–ª–∏ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –Ω–µ—Ç, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

    for channel, is_mandatory in sponsors:
        if is_mandatory:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
            status = bot.get_chat_member(channel, user_id).status
            if status not in ['member', 'administrator', 'creator']:
                return False
    return True

@bot.message_handler(commands=['start'])
def start(message):
    if check_subscription(message.from_user.id):
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    else:
        sponsors = get_all_sponsors()
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–∏–ª—å–º–∞–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:", reply_markup=sponsors_keyboard(sponsors))



@bot.message_handler(func=lambda message: message.text == "üì¢ –†–∞–∑–¥–µ–ª –°–ø–æ–Ω—Å–æ—Ä—ã")
def show_sponsors_admin_menu(message):
    if is_admin(message.from_user.id):
        try:
            bot.delete_message(message.chat.id, message.message_id - 1)
        except Exception:
            pass
        bot.send_message(message.chat.id, "üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏:", reply_markup=sponsors_admin_menu())
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–∞")
def add_sponsor_start(message):
    if is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É:")
        bot.register_next_step_handler(message, get_sponsor_link)

def get_sponsor_link(message):
    link = message.text
    bot.send_message(message.chat.id, "–°–ø–æ–Ω—Å–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π? (1 - –î–∞, 0 - –ù–µ—Ç)")
    bot.register_next_step_handler(message, lambda msg: save_sponsor(msg, link))

def save_sponsor(message, link):
    try:
        is_mandatory = int(message.text)
        if add_sponsor_to_db(link, is_mandatory):
            bot.send_message(message.chat.id, "‚úÖ –°–ø–æ–Ω—Å–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π —Å–ø–æ–Ω—Å–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ 1 (–î–∞) –∏–ª–∏ 0 (–ù–µ—Ç). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(func=lambda message: message.text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–∞")
def update_sponsor_start(message):
    if is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Å—ã–ª–∫—É —Å–ø–æ–Ω—Å–æ—Ä–∞:")
        bot.register_next_step_handler(message, get_old_sponsor_link)

def get_old_sponsor_link(message):
    old_link = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É —Å–ø–æ–Ω—Å–æ—Ä–∞:")
    bot.register_next_step_handler(message, lambda msg: get_new_sponsor_link(msg, old_link))

def get_new_sponsor_link(message, old_link):
    new_link = message.text
    bot.send_message(message.chat.id, "–°–ø–æ–Ω—Å–æ—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π? (1 - –î–∞, 0 - –ù–µ—Ç)")
    bot.register_next_step_handler(message, lambda msg: save_updated_sponsor(msg, old_link, new_link))

def save_updated_sponsor(message, old_link, new_link):
    try:
        is_mandatory = int(message.text)
        if update_sponsor_in_db(old_link, new_link, is_mandatory):
            bot.send_message(message.chat.id, "‚úÖ –°–ø–æ–Ω—Å–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            bot.send_message(message.chat.id, "‚ùå –°–ø–æ–Ω—Å–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ 1 (–î–∞) –∏–ª–∏ 0 (–ù–µ—Ç). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@bot.message_handler(func=lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–∞")
def delete_sponsor_start(message):
    if is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É —Å–ø–æ–Ω—Å–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(message, delete_sponsor)

def delete_sponsor(message):
    link = message.text
    if delete_sponsor_from_db(link):
        bot.send_message(message.chat.id, "‚úÖ –°–ø–æ–Ω—Å–æ—Ä —É–¥–∞–ª–µ–Ω!")
    else:
        bot.send_message(message.chat.id, "‚ùå –°–ø–æ–Ω—Å–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")


@bot.message_handler(func=lambda message: message.text == "üé¨ –§–∏–ª—å–º—ã")
def show_sponsors(message):
    if not check_subscription(message.from_user.id):
        sponsors = get_all_sponsors()
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ–∏–ª—å–º–∞–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:", reply_markup=sponsors_keyboard(sponsors))
    else:
        bot.send_message(message.chat.id, "‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞:")
        bot.register_next_step_handler(message, get_movie)

@bot.callback_query_handler(func=lambda call: call.data == "check_subs")
def check_subs(call):
    if check_subscription(call.from_user.id):
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞:")
        bot.register_next_step_handler(call.message, get_movie)
    else:
        bot.send_message(call.message.chat.id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def get_movie(message):
    movie = get_movie_by_code(message.text)
    if movie:
        link, image_id, description = movie
        caption = f"üé¨ *–§–∏–ª—å–º*: {message.text}\n\nüìñ *–û–ø–∏—Å–∞–Ω–∏–µ*: {description}\n\nüîó [–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º]({link})"
        bot.send_photo(message.chat.id, image_id, caption=caption, parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def is_admin(user_id):
    return user_id in ADMIN_ID

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "üëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º")
def add_movie_start(message):
    if is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç–µ—Ä —Ñ–∏–ª—å–º–∞ (—Ñ–æ—Ç–æ).", reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_movie_photo)

def get_movie_photo(message):
    if not message.photo:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=admin_menu())
        return
    image_id = message.photo[-1].file_id
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞:")
    bot.register_next_step_handler(message, lambda msg: get_movie_code(msg, image_id))

def get_movie_code(message, image_id):
    code = message.text
    if int(code):
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ñ–∏–ª—å–º:")
        bot.register_next_step_handler(message, lambda msg: get_movie_link(msg, code, image_id))
    else:
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=admin_menu())
        return

def get_movie_link(message, code, image_id):
    link = message.text
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
    bot.register_next_step_handler(message, lambda msg: save_movie(msg, code, link, image_id))

def save_movie(message, code, link, image_id):
    description = message.text
    if add_movie_to_db(code, link, image_id, description):
        bot.send_message(message.chat.id, "‚úÖ –§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω!")
    else:
        bot.send_message(message.chat.id, "‚ùå –§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", reply_markup=admin_menu())

@bot.message_handler(func=lambda message: message.text == "üé¨ –†–∞–∑–¥–µ–ª –§–∏–ª—å–º—ã")
def show_movies_admin_menu(message):
    if is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "üé¨ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–∞–º–∏:", reply_markup=movies_admin_menu())
    else:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")

@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def back_admin_menu(message):
    if is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å...", reply_markup=admin_menu())

bot.polling(none_stop=True)
